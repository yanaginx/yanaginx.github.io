<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Duong Van (@yanagi.dev) Blog</title>
        <link>https://yanaginx.github.io/blog</link>
        <description>Duong Van (@yanagi.dev) Blog</description>
        <lastBuildDate>Thu, 29 Dec 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Accessing tops module from class-based component in UVM testbench]]></title>
            <link>https://yanaginx.github.io/blog/uvm-module-access</link>
            <guid>uvm-module-access</guid>
            <pubDate>Thu, 29 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Overview]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="overview">Overview<a class="hash-link" href="#overview" title="Direct link to heading">​</a></h2><p>The case for the need of this access is inside a UVM Testbench, where the test would generate some randomization on the data and need to access the instantiated module (let say <code>model</code> in this case) in the <code>top</code>. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-workaround">The workaround<a class="hash-link" href="#the-workaround" title="Direct link to heading">​</a></h2><p>For the workaround demonstration, a simple UVM testbench generated with <a href="https://www.doulos.com/knowhow/systemverilog/uvm/easier-uvm" target="_blank" rel="noopener noreferrer">EasierUVM</a> will be used.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="overview-of-the-testbench">Overview of the testbench<a class="hash-link" href="#overview-of-the-testbench" title="Direct link to heading">​</a></h3><p>// Update the graph later with the model’s module</p><p><img loading="lazy" alt="Untitled" src="/assets/images/Untitled-26f77d47ef9f29026e0cec6644debb30.png" width="468" height="439" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="implementation">Implementation<a class="hash-link" href="#implementation" title="Direct link to heading">​</a></h3><p>The DUT in this case is a simple ALU’s adder</p><div class="language-verilog codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-verilog codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">module adder (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    input  logic [7:0] A,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    input  logic [7:0] B,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    output logic [8:0] F</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    always_comb</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        F &lt;= A+B;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">endmodule</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The module wanted to be accessed from the test is the input generator (this is for demonstration purpose only, for normal UVM testbench this should be implemented as UVM driver-driver BFM pair)</p><div class="language-verilog codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-verilog codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">module input_model (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    input  logic clk,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    output logic [7:0] A,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    output logic [7:0] B</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  logic [7:0] input_pool[*];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  int current_index = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  int rand_index = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  reg [7:0] reg_A;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  reg [7:0] reg_B;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // Function to be called for adding randomized input</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  function void insert_input(logic[7:0] value);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    input_pool[current_index++] = value;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $display("INPUT MODEL: Currently inserting: 0x%8x at index %d", value, current_index-1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  endfunction : insert_input</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  always @(posedge clk) begin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    assert ( randomize(rand_index) with { rand_index inside {[0:current_index-1]}; }) else </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    begin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      $display("why the fuck can it not randomize properly?");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $display("Current rand_index: %d", rand_index);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $display("Current current_index: %d", current_index);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    reg_A &lt;= input_pool[rand_index];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    reg_B &lt;= input_pool[rand_index];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  assign A = reg_A;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  assign B = reg_B;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">endmodule : input_model</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The package containing the virtual class extending <code>uvm_object</code> → This will be used in other testbench’s class components</p><div class="language-verilog codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-verilog codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">package backdoor_access_pkg;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  import uvm_pkg::*;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  virtual class input_model_backdoor extends uvm_pkg::uvm_object;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    function new(string name="input_model_backdoor");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      super.new(name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    endfunction</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pure virtual function void insert_input(logic [7:0] value);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  endclass : input_model_backdoor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">endpackage : backdoor_access_pkg</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The wrapper class for the module that extends and implement all the virtual methods of the created virtual class</p><div class="language-verilog codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-verilog codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">`include "uvm_macros.svh"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import uvm_pkg::*;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import backdoor_access_pkg::*;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class backdoor_im extends input_model_backdoor;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  function new(string name="backdoor_im");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    super.new(name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  endfunction : new </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  function void insert(logic[7:0] value);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    **top_tb.th.model.insert_input(value);**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  endfunction : insert</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">endclass : backdoor_im</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">initial begin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  backdoor_im backdoor_im_i;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  backdoor_im_i = new();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  uvm_config_db #(uvm_object)::set(uvm_root::get(), "*", "IM_BACKDOOR_ACCESS", backdoor_im_i);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Adding the handle to the <code>uvm_config_db</code> under <code>uvm_root::get()</code> as the parent, <code>*</code> as the scope, key string and the handle itself:</li><li>Instantiating it in the <code>top.sv</code> , (<code>top_tb.sv</code> in this example)</li></ul><div class="language-verilog codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-verilog codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">module top_tb;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  timeunit      1ns;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  timeprecision 1ps;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `include "uvm_macros.svh"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  import uvm_pkg::*;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  import top_test_pkg::*;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  import top_pkg::top_config;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // Configuration object for top-level environment</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  top_config top_env_config;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // Test harness</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  top_th th();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  **`include "backdoor_input_model.sv"**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  initial</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  begin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Create and populate top-level configuration object</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    top_env_config = new("top_env_config");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if ( !top_env_config.randomize() )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      `uvm_error("top_tb", "Failed to randomize top-level configuration object" )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    top_env_config.arith_vif             = th.arith_if_0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    top_env_config.is_active_arith       = UVM_ACTIVE;   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    top_env_config.checks_enable_arith   = 1;            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    top_env_config.coverage_enable_arith = 1;            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    uvm_config_db #(top_config)::set(null, "uvm_test_top", "config", top_env_config);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    uvm_config_db #(top_config)::set(null, "uvm_test_top.m_env", "config", top_env_config);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    run_test();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">endmodule</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Including the packages in the environment (in this case in the agent’s package)</p><div class="language-verilog codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-verilog codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">package arith_pkg;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `include "uvm_macros.svh"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  import uvm_pkg::*;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    import backdoor_access_pkg::*;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `include "arith_trans.sv"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `include "arith_config.sv"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `include "arith_driver.sv"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `include "arith_monitor.sv"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `include "arith_sequencer.sv"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `include "arith_coverage.sv"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `include "arith_agent.sv"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `include "arith_seq_lib.sv"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">endpackage : arith_pkg</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And the remaining is to access the module from the test using the virtual class, by fetching the handle from the <code>uvm_config_db</code> as an <code>uvm_object</code> and cast it to the correct type of the virtual class</p><div class="language-verilog codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-verilog codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">`ifndef TOP_TEST_SV</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">`define TOP_TEST_SV</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// You can insert code here by setting test_inc_before_class in file common.tpl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class top_test extends uvm_test;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `uvm_component_utils(top_test)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // Change made here</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  top_env m_env;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  logic [7:0] rand_input = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // end : Change made here</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  backdoor_access_pkg::input_model_backdoor backdoor_im_i;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  uvm_object backdoor_object_i;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  extern function new(string name, uvm_component parent);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  extern function void build_phase(uvm_phase phase);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  extern task run_phase(uvm_phase phase);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">endclass : top_test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">function top_test::new(string name, uvm_component parent);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  super.new(name, parent);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">endfunction : new</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">function void top_test::build_phase(uvm_phase phase);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  m_env = top_env::type_id::create("m_env", this);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // Fetching the handle from the uvm_config_db and cast it to the correct type</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  **if(!uvm_config_db#(uvm_object)::get(uvm_root::get(), "", "IM_BACKDOOR_ACCESS", backdoor_object_i))   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  begin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `uvm_fatal("TEST","Failed to get input model backdoor access object")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  assert($cast(backdoor_im_i, backdoor_object_i)) else begin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `uvm_fatal("ASSERT", "Dynamic casting backdoor_im_instance failed!")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  end**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">endfunction : build_phase</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">task top_test::run_phase(uvm_phase phase);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  $display("Went in the run_phase of the test!");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  #10;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  for (int i = 0; i &lt; 256; ++i) begin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    assert (randomize(rand_input));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    backdoor_im_i.insert(rand_input);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  #1000;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">endtask</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">`endif // TOP_TEST_SV</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Also remember to compile the <code>.sv</code> file and packages properly. The compiling sequence should be included in the <code>compile_questa.do</code> script.</p><p>The result when running the simulation</p><p><img loading="lazy" alt="Untitled" src="/assets/images/Untitled 1-e9d1e3a70f60f4580f83e2fe4c1c5efe.png" width="1160" height="1028" class="img_ev3q"></p><p>The result when dumping signals, by adding some signals on <code>top_th.sv</code> and a little addition on <code>top_tb.sv</code> file</p><p><img loading="lazy" alt="Untitled" src="/assets/images/Untitled 2-c186e14afe6b806756d37f30f5528e79.png" width="935" height="673" class="img_ev3q"></p><p><img loading="lazy" alt="Untitled" src="/assets/images/Untitled 3-527c54b32a73755cbbe1224383bee7fb.png" width="845" height="507" class="img_ev3q"></p><p><img loading="lazy" alt="Untitled" src="/assets/images/Untitled 4-aec093b56fe0ba1448cdb7ef0441e3d6.png" width="2545" height="507" class="img_ev3q"></p><p>This result concludes the ability to manipulate the module that is instantiated on the <code>top</code> from a test component in UVM testbench</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a class="hash-link" href="#summary" title="Direct link to heading">​</a></h2><ul><li>Create a virtual class extending <code>uvm_object</code> (for example <code>VC</code>)</li><li>Create a wrapper <em>class</em> for the module that extends and implement all the virtual methods of the created virtual class<ul><li><p>Instantiating it in the <code>top.sv</code></p></li><li><p>Adding the handle to the <code>uvm_config_db</code> under <code>uvm_root::get()</code> as the parent, <code>*</code> as the scope, key string and the handle itself:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">uvm_config_db #(uvm_object)::set(uvm_root::get(), "*", "&lt;KEY&gt;", &lt;wrapper_handle&gt;);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>This will ensure the scope of the statement used to call the <code>top</code>'s instantiated module.</p><p>Meaning the statement <code>top.&lt;module_name&gt;.&lt;method_name&gt;()</code> should be valid.</p></blockquote></li></ul></li><li>The virtual class <code>VC</code> mentioned above will be used for the lower level component in the environment hierarchy for accessing the top instantiated module’s methods.</li></ul>]]></content:encoded>
            <category>SystemVerilog</category>
            <category>UVM</category>
        </item>
        <item>
            <title><![CDATA[Welcome]]></title>
            <link>https://yanaginx.github.io/blog/welcome</link>
            <guid>welcome</guid>
            <pubDate>Thu, 26 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Docusaurus blogging features are powered by the blog plugin.]]></description>
            <content:encoded><![CDATA[<p><a href="https://docusaurus.io/docs/blog" target="_blank" rel="noopener noreferrer">Docusaurus blogging features</a> are powered by the <a href="https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog" target="_blank" rel="noopener noreferrer">blog plugin</a>.</p><p>Simply add Markdown files (or folders) to the <code>blog</code> directory.</p><p>Regular blog authors can be added to <code>authors.yml</code>.</p><p>The blog post date can be extracted from filenames, such as:</p><ul><li><code>2019-05-30-welcome.md</code></li><li><code>2019-05-30-welcome/index.md</code></li></ul><p>A blog post folder can be convenient to co-locate blog post images:</p><p><img loading="lazy" alt="Docusaurus Plushie" src="/assets/images/docusaurus-plushie-banner-a60f7593abca1e3eef26a9afa244e4fb.jpeg" width="1500" height="500" class="img_ev3q"></p><p>The blog supports tags as well!</p><p><strong>And if you don't want a blog</strong>: just delete this directory, and use <code>blog: false</code> in your Docusaurus config.</p>]]></content:encoded>
            <category>facebook</category>
            <category>hello</category>
            <category>docusaurus</category>
        </item>
    </channel>
</rss>