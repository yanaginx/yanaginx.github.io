import{_ as t,c as a,a2 as n,o as s}from"./chunks/framework.CbP2pKAi.js";const o="/assets/Untitled.Cx4-rMOj.png",i="/assets/Untitled%201.-1TUZFla.png",r="/assets/Untitled%202.D0WCRNwH.png",l="/assets/Untitled%203.CE9VSI_B.png",c="/assets/Untitled%204.rxa-EzQz.png",d="/assets/Untitled%205.Br2oNK2G.png",p="/assets/Untitled%206.CyCuqx3G.png",m="/assets/Untitled%207.BlOxGt5F.png",h="/assets/Untitled%208.CwfXd1hr.png",u="/assets/Untitled%209.C7ykzHJW.png",b="/assets/Untitled%2010.BiIGBv52.png",g="/assets/Untitled%2011.BtRZbfnB.png",q="/assets/Untitled%2012.BqTb59gr.png",f="/assets/Untitled%2013.CyQmvSiK.png",k="/assets/Untitled%2014.ByxfI5iv.png",_="/assets/Untitled%2015.DLTJMJFn.png",U="/assets/Untitled%2016.C-MiCF6R.png",C=JSON.parse('{"title":"Writing and managing Tests","description":"","frontmatter":{"slug":"writing-and-managing-tests"},"headers":[],"relativePath":"notes/uvm/advanced-uvm/writing-and-managing-tests.md","filePath":"notes/uvm/advanced-uvm/writing-and-managing-tests.md","lastUpdated":1728207659000}'),v={name:"notes/uvm/advanced-uvm/writing-and-managing-tests.md"};function x(j,e,T,y,P,w){return s(),a("div",null,e[0]||(e[0]=[n('<h1 id="writing-and-managing-tests" tabindex="-1">Writing and managing Tests <a class="header-anchor" href="#writing-and-managing-tests" aria-label="Permalink to &quot;Writing and managing Tests&quot;">​</a></h1><blockquote><p>Contents are extracted from the Advanced UVM sessions by <a href="https://verificationacademy.com/" target="_blank" rel="noreferrer">Verification Academy</a>.</p></blockquote><h2 id="what-is-a-test" tabindex="-1">What is a test? <a class="header-anchor" href="#what-is-a-test" aria-label="Permalink to &quot;What is a test?&quot;">​</a></h2><p><em>The environment is the “testbench”</em></p><ul><li>Defines what components are needed to verify the DUT</li><li>Specifies defaults</li></ul><p><em>The test’s job is to “tweak” the tesbench</em></p><ul><li>Configuration</li><li>Factory overrides</li><li>Additional sequences</li></ul><p><em>The test’s other job is to ensure that the simulation ends</em></p><h2 id="defaults-in-uvm" tabindex="-1">Defaults in UVM <a class="header-anchor" href="#defaults-in-uvm" aria-label="Permalink to &quot;Defaults in UVM&quot;">​</a></h2><p><img src="'+o+'" alt="Untitled"></p><blockquote><p>Can add additional check to make sure the value pass by the configuration DB from the test is still legal</p></blockquote><p><img src="'+i+'" alt="Untitled"></p><h2 id="use-a-base-test-to-set-defaults" tabindex="-1">Use a Base Test to set defaults <a class="header-anchor" href="#use-a-base-test-to-set-defaults" aria-label="Permalink to &quot;Use a Base Test to set defaults&quot;">​</a></h2><blockquote><p>There is option to override the environment type, make sure to do factory override before calling <code>super.build</code> inside the extended test</p></blockquote><p><img src="'+r+'" alt="Untitled"></p><h2 id="extend-base-test-to-create-a-test" tabindex="-1">Extend Base Test to create a Test <a class="header-anchor" href="#extend-base-test-to-create-a-test" aria-label="Permalink to &quot;Extend Base Test to create a Test&quot;">​</a></h2><p><img src="'+l+'" alt="Untitled"></p><blockquote><p>To override the environment type as mentioned above:</p></blockquote><p><img src="'+c+'" alt="Untitled"></p><h2 id="set-up-and-invoke-test" tabindex="-1">Set up and invoke test <a class="header-anchor" href="#set-up-and-invoke-test" aria-label="Permalink to &quot;Set up and invoke test&quot;">​</a></h2><blockquote><p>Instantiate the DUT’s virtual interface and pass it down to the testbench through UVM config DB</p></blockquote><p><img src="'+d+'" alt="Untitled"></p><h2 id="complex-environment-simple-test" tabindex="-1">Complex environment, simple test <a class="header-anchor" href="#complex-environment-simple-test" aria-label="Permalink to &quot;Complex environment, simple test&quot;">​</a></h2><p><img src="'+p+'" alt="Untitled"></p><h3 id="simple-test" tabindex="-1">Simple Test <a class="header-anchor" href="#simple-test" aria-label="Permalink to &quot;Simple Test&quot;">​</a></h3><p><img src="'+m+'" alt="Untitled"></p><h3 id="extended-test" tabindex="-1">Extended Test <a class="header-anchor" href="#extended-test" aria-label="Permalink to &quot;Extended Test&quot;">​</a></h3><p><img src="'+h+'" alt="Untitled"></p><blockquote><p>The virtual sequence can also be overridden using the <code>set_type_override</code> method → Explicit sequence type override</p></blockquote><h2 id="managing-test-execution-phase-objections" tabindex="-1">Managing Test Execution: Phase objections <a class="header-anchor" href="#managing-test-execution-phase-objections" aria-label="Permalink to &quot;Managing Test Execution: Phase objections&quot;">​</a></h2><p><em>Components or Sequences can raise or drop objections</em></p><p><em>Phase continues until all raised objections are dropped</em></p><p><em>An objection must be raised at the beginning of the phase</em></p><h3 id="objections-are-hierarchical" tabindex="-1">Objections are hierarchical <a class="header-anchor" href="#objections-are-hierarchical" aria-label="Permalink to &quot;Objections are hierarchical&quot;">​</a></h3><p><em>Objections are raised up the hierarchy by default</em></p><p><img src="'+u+'" alt="Untitled"></p><blockquote><p>Sequencer’s objection + Monitor’s objection = 2 agent’s objections</p></blockquote><p><em>Objections are dropped hierarchically too</em></p><p><img src="'+b+'" alt="Untitled"></p><p><em>When a component’s count = 0, wait for <code>drain_time</code> to elapse</em></p><p><img src="'+g+'" alt="Untitled"></p><h3 id="recommendation" tabindex="-1">Recommendation <a class="header-anchor" href="#recommendation" aria-label="Permalink to &quot;Recommendation&quot;">​</a></h3><blockquote><p>Raise and drop objections inside the test</p><p>Allows the test to determine when all the stimulus is complete and start dropping the objection</p></blockquote><p><img src="'+q+'" alt="Untitled"></p><blockquote><p>There might be cases where the objections is drop before the last transaction hasn’t finish processing yet</p></blockquote><h2 id="using-objections" tabindex="-1">Using objections <a class="header-anchor" href="#using-objections" aria-label="Permalink to &quot;Using objections&quot;">​</a></h2><blockquote><p>Scoreboard recording transactions can raise an objection to prevent the test from ending early, make sure all the transactions has been recorded</p></blockquote><p><img src="'+f+'" alt="Untitled"></p><blockquote><p>Not recommended since it will introduce additional overhead</p></blockquote><p><strong>Alternative solution:</strong></p><p><img src="'+k+'" alt="Untitled"></p><h2 id="recommendation-objecting-in-a-component" tabindex="-1">Recommendation: Objecting in a component <a class="header-anchor" href="#recommendation-objecting-in-a-component" aria-label="Permalink to &quot;Recommendation: Objecting in a component&quot;">​</a></h2><blockquote><p>Using the provided method <code>phase_ready_to_end</code> to do the objection before ending the phase</p></blockquote><p><img src="'+_+'" alt="Untitled"></p><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p><img src="'+U+'" alt="Untitled"></p>',56)]))}const S=t(v,[["render",x]]);export{C as __pageData,S as default};
