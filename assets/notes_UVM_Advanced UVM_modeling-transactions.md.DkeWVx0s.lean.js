import{_ as t,c as s,a2 as a,o}from"./chunks/framework.CbP2pKAi.js";const i="/assets/Untitled.xvQZFS_J.png",n="/assets/Untitled%201.O8hmoqlB.png",r="/assets/Untitled%202.BBMIJcEj.png",c="/assets/Untitled%203.BGJqnjeA.png",m="/assets/Untitled%204.ByWEjznS.png",l="/assets/Untitled%205.BGVDlrce.png",d="/assets/Untitled%206.Dc6pqK_5.png",p="/assets/Untitled%207.Bs-NL2D7.png",u="/assets/Untitled%208.DUg7GBk0.png",k=JSON.parse('{"title":"Modeling transactions","description":"","frontmatter":{"slug":"modeling-transactions"},"headers":[],"relativePath":"notes/UVM/Advanced UVM/modeling-transactions.md","filePath":"notes/UVM/Advanced UVM/modeling-transactions.md","lastUpdated":1727526443000}'),h={name:"notes/UVM/Advanced UVM/modeling-transactions.md"};function q(g,e,f,_,b,U){return o(),s("div",null,e[0]||(e[0]=[a('<h1 id="modeling-transactions" tabindex="-1">Modeling transactions <a class="header-anchor" href="#modeling-transactions" aria-label="Permalink to &quot;Modeling transactions&quot;">​</a></h1><blockquote><p>Contents are extracted from the Advanced UVM sessions by <a href="https://verificationacademy.com/" target="_blank" rel="noreferrer">Verification Academy</a>.</p></blockquote><h2 id="separating-stimulus-from-the-testbench" tabindex="-1">Separating stimulus from the testbench <a class="header-anchor" href="#separating-stimulus-from-the-testbench" aria-label="Permalink to &quot;Separating stimulus from the testbench&quot;">​</a></h2><p>*Key to reusability is to separate <em>Behavior</em> from <em>Structure</em></p><p><img src="'+i+'" alt="Untitled"></p><p>Transactions (Sequence items) ⇒ The main communication vehicle across the boundary</p><h3 id="sequences" tabindex="-1">Sequences <a class="header-anchor" href="#sequences" aria-label="Permalink to &quot;Sequences&quot;">​</a></h3><p><em>Decouple stimulus specification from structural hierarchy</em></p><ul><li>Add/remove/modify stimulus scenarios independent of testbench</li><li>Simplify test writer API</li></ul><p><em>Sequences define transaction streams</em></p><ul><li>May start on any sequencer</li></ul><p><em>Sequences can call children</em></p><p><em>Sequences &amp; transactions can be customize via the factory</em></p><p><img src="'+n+'" alt="Untitled"></p><h2 id="designing-a-sequence-item" tabindex="-1">Designing a sequence item <a class="header-anchor" href="#designing-a-sequence-item" aria-label="Permalink to &quot;Designing a sequence item&quot;">​</a></h2><p><img src="'+r+'" alt="Untitled"></p><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><p><em><code>do_copy()</code></em></p><p><img src="'+c+'" alt="Untitled"></p><p><em><code>do_compare()</code></em></p><p><em><code>convert2string()</code></em></p><p><img src="'+m+'" alt="Untitled"></p><p><em><code>do_print()</code></em></p><blockquote><p>Not recommended for usage since it will provide some overhead</p></blockquote><p><img src="'+l+'" alt="Untitled"></p><p><img src="'+d+'" alt="Untitled"></p><p><em><code>do_record()</code></em></p><p><img src="'+p+'" alt="Untitled"></p><p><em><code>do_pack()</code></em> and <em><code>do_unpack()</code></em></p><blockquote><p>Not use very often</p></blockquote><h2 id="sequence-item-composition" tabindex="-1">Sequence item composition <a class="header-anchor" href="#sequence-item-composition" aria-label="Permalink to &quot;Sequence item composition&quot;">​</a></h2><blockquote><p>Layering: Use another sequence item inside a sequence item</p></blockquote><p><img src="'+u+'" alt="Untitled"></p><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p><em>Encapsulate the information needed to process an operation</em></p><ul><li>Whatever that means for the application</li></ul><p><em>Helper functions (mentioned above)</em></p><p><em>Do not use <code>uvm_field*</code> macros</em></p><ul><li>Decreases performance</li><li>Hinders debug</li></ul><p><em>Use inheritance for similar transactions</em></p><p><em>Use composition when needed</em></p><h3 id="rules-for-sequence-items" tabindex="-1">Rules for sequence items <a class="header-anchor" href="#rules-for-sequence-items" aria-label="Permalink to &quot;Rules for sequence items&quot;">​</a></h3><p><em>Define sequence items by specifying data members only</em></p><ul><li>Do not override <code>pre/mid/post_do</code></li></ul><p><em>Create items via their <code>type_id</code> (using factory only)</em></p><ul><li><code>my_item::type_id::create(&quot;tx&quot;);</code></li></ul><p><em>Execute items using <code>start_item()/finish_item()</code></em></p>',47)]))}const v=t(h,[["render",q]]);export{k as __pageData,v as default};
