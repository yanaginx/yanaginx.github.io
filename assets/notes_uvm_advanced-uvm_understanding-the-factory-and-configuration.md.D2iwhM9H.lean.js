import{_ as e,c as i,a2 as s,o as a}from"./chunks/framework.CbP2pKAi.js";const n="/assets/Untitled.DmweZva8.png",o="/assets/Untitled%201.CBtf9aMD.png",l="/assets/Untitled%202.DDX-DGJ3.png",r="/assets/Untitled%203.BBKtc4cL.png",p="/assets/Untitled%204.QOIYXz7z.png",h="/assets/Untitled%205.DlQhPiQx.png",d="/assets/Untitled%206.DtNfPF6B.png",c="/assets/Untitled%207.ClGNfvXf.png",g="/assets/Untitled%208.D-cJ1LpG.png",k="/assets/Untitled%209.CIqSeJV8.png",u="/assets/Untitled%2010.D3OI9uC6.png",m="/assets/Untitled%2011.CocEwPJF.png",y="/assets/Untitled%2012.CgxzDTPB.png",f="/assets/Untitled%2013.BZqIfuhO.png",b="/assets/Untitled%2014.Bs0Q0j9d.png",C="/assets/Untitled%2015.BBuTQNT9.png",_="/assets/Untitled%2016.Bq9U6kLD.png",v="/assets/Untitled%2017.BrdVIbci.png",B="/assets/Untitled%2018.DV3EpGBi.png",A="/assets/Untitled%2019.CvYdH5Cw.png",D="/assets/Untitled%2020.BdF315I8.png",j=JSON.parse('{"title":"Understanding the Factory and Configuration","description":"","frontmatter":{"slug":"understanding-the-factory-and-configuration"},"headers":[],"relativePath":"notes/uvm/advanced-uvm/understanding-the-factory-and-configuration.md","filePath":"notes/uvm/advanced-uvm/understanding-the-factory-and-configuration.md","lastUpdated":1728207659000}'),q={name:"notes/uvm/advanced-uvm/understanding-the-factory-and-configuration.md"};function U(w,t,x,P,F,T){return a(),i("div",null,t[0]||(t[0]=[s('<h1 id="understanding-the-factory-and-configuration" tabindex="-1">Understanding the Factory and Configuration <a class="header-anchor" href="#understanding-the-factory-and-configuration" aria-label="Permalink to &quot;Understanding the Factory and Configuration&quot;">​</a></h1><blockquote><p>Contents are extracted from the Advanced UVM sessions by <a href="https://verificationacademy.com/" target="_blank" rel="noreferrer">Verification Academy</a>.</p></blockquote><h2 id="_2-customization-mechanism" tabindex="-1">2 customization mechanism <a class="header-anchor" href="#_2-customization-mechanism" aria-label="Permalink to &quot;2 customization mechanism&quot;">​</a></h2><h3 id="factory" tabindex="-1">Factory <a class="header-anchor" href="#factory" aria-label="Permalink to &quot;Factory&quot;">​</a></h3><ul><li>Allows test to change the type of a desired component or object</li><li>Typically set up at start of simulation</li></ul><h3 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h3><ul><li>Allows parents to define properties for children <ul><li>Static (build-time) - Highest parent “wins”</li><li>Dynamic (run-time) - Last set ”wins”</li></ul></li><li>All UVM components get their own configuration <ul><li>Optionally use to configure their children</li></ul></li></ul><h2 id="factory-1" tabindex="-1">Factory <a class="header-anchor" href="#factory-1" aria-label="Permalink to &quot;Factory&quot;">​</a></h2><h3 id="create-vs-new" tabindex="-1"><code>create()</code> vs <code>new()</code> <a class="header-anchor" href="#create-vs-new" aria-label="Permalink to &quot;`create()` vs `new()`&quot;">​</a></h3><p><img src="'+n+'" alt="Untitled"></p><aside><img src="https://www.notion.so/icons/info-alternate_green.svg" alt="https://www.notion.so/icons/info-alternate_green.svg" width="40px"> Factory allow to alternate the type of the created component without modifying the instantiating code </aside><p><img src="'+o+'" alt="Untitled"></p><h3 id="registering-with-factory" tabindex="-1">Registering with Factory <a class="header-anchor" href="#registering-with-factory" aria-label="Permalink to &quot;Registering with Factory&quot;">​</a></h3><blockquote><p>Objects are registered with the factory via macros</p></blockquote><div class="language-system-verilog vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">system-verilog</span><pre class="shiki shiki-themes vitesse-light vitesse-black vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#444444;">`</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">uvm_object_utils</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">type</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">)</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#444444;">`</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">uvm_component_utils</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">type</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">)</span></span></code></pre></div><p>The macro utils will create a wrapper type that registering in the factory to allow accessing it from the factory via the <code>create()</code> method</p><p><img src="'+l+'" alt="Untitled"></p><p><img src="'+r+'" alt="Untitled"></p><p><em><code>type_id::set_type_override(&lt;type&gt;);</code> is a static methods in the wrapper</em></p><blockquote><p>Test now have the ability to override the type of component that returned from the factory</p></blockquote><p><em><code>get_type()</code> returns the type &quot;handle&quot;</em></p><p><img src="'+p+'" alt="Untitled"></p><p><em><code>set_inst_override(&lt;type&gt;, &quot;&lt;instance&gt;&quot;);</code> can also be used in addition to <code>set_type_override</code> for overriding instance</em></p><h3 id="overriding-a-type" tabindex="-1">Overriding a type <a class="header-anchor" href="#overriding-a-type" aria-label="Permalink to &quot;Overriding a type&quot;">​</a></h3><p><img src="'+h+'" alt="Untitled"></p><p><img src="'+d+'" alt="Untitled"></p><p><img src="'+c+'" alt="Untitled"></p><blockquote><p>When doing <code>type_override</code> in the factory, the last change will be reflected</p><p><code>set_inst_override</code> take precedence over <code>set_type_override</code></p><p>→ Will be the case regards of the order in which <code>set_type_override</code> and <code>set_inst_override</code> is executed</p><p>⇒ The U2 in the example will always be a triangle</p></blockquote><h3 id="using-parameterized-types" tabindex="-1">Using parameterized types <a class="header-anchor" href="#using-parameterized-types" aria-label="Permalink to &quot;Using parameterized types&quot;">​</a></h3><p><img src="'+g+'" alt="Untitled"></p><p><img src="'+k+'" alt="Untitled"></p><p><img src="'+u+'" alt="Untitled"></p><p><img src="'+m+'" alt="Untitled"></p><h3 id="tests-are-components-too" tabindex="-1">Tests are components, too! <a class="header-anchor" href="#tests-are-components-too" aria-label="Permalink to &quot;Tests are components, too!&quot;">​</a></h3><p><em>run_test() creates the test from the factory</em></p><p><img src="'+y+'" alt="Untitled"></p><p>The test type instantiation will be determined using the command line plusargs <code>+UVM_TESTNAME</code></p><p><em>Always call <code>run_test()</code> with null argument</em></p><blockquote><p><code>run_test()</code> can be called with an argument to specify a default test to be run when there is no test name specified when running the simulation</p><p>⇒ Recommended to call <code>run_test()</code> with null argument</p></blockquote><h3 id="use-the-factory-for-objects" tabindex="-1">Use the factory for objects <a class="header-anchor" href="#use-the-factory-for-objects" aria-label="Permalink to &quot;Use the factory for objects&quot;">​</a></h3><p><img src="'+f+'" alt="Untitled"></p><p><img src="'+b+'" alt="Untitled"></p><h2 id="configuration-database" tabindex="-1">Configuration database <a class="header-anchor" href="#configuration-database" aria-label="Permalink to &quot;Configuration database&quot;">​</a></h2><p><em>Explicitly typed</em></p><p><em>Tied to the hierarchical scopes</em></p><p><img src="'+C+'" alt="Untitled"></p><blockquote><p>The value of the component on the highest of the hierarchy will be used</p></blockquote><p>The <code>build_phase</code> happens top-down, so when setting the value of driver’s x, the driver isn’t instantiate yet ⇒ Using configuration database will allow this to be done</p><p><img src="'+_+'" alt="Untitled"></p><p><img src="'+v+'" alt="Untitled"></p><blockquote><p>Allow reusability since the test only care about setting up the value on the environment</p></blockquote><h3 id="uvm-config-db" tabindex="-1"><code>uvm_config_db</code> <a class="header-anchor" href="#uvm-config-db" aria-label="Permalink to &quot;`uvm_config_db`&quot;">​</a></h3><p><em>Uses a <code>set()</code>/<code>get()</code> API</em></p><ul><li>No casting on <code>get()</code></li><li>Linked to component hierarchy</li></ul><div class="language-system-verilog vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">system-verilog</span><pre class="shiki shiki-themes vitesse-light vitesse-black vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">uvm_config_db</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> #</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">type</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">this</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">, </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&lt;inst&gt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">, </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&lt;field&gt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">);</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">uvm_config_db</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> #</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">type</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">this</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">, </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&lt;inst&gt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">, </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&lt;field&gt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">);</span></span></code></pre></div><p>On the <code>set</code>:</p><blockquote><p><code>this</code>: the component making the call</p><p><code>&lt;inst&gt;</code>: Is the name of component we wanna set relative to the component doing the <code>set</code></p></blockquote><p>On the <code>get</code>:</p><blockquote><p>The <code>&lt;inst&gt;</code> is usually set to null since the <code>this</code> already content the full path to the component</p></blockquote><p><img src="'+B+'" alt="Untitled"></p><blockquote><p>If field name is the same, we get the value from the database and return it</p></blockquote><h3 id="uvm-features" tabindex="-1">UVM Features <a class="header-anchor" href="#uvm-features" aria-label="Permalink to &quot;UVM Features&quot;">​</a></h3><p>Passing virtual interface handle from the top level module to the test</p><p><img src="'+A+'" alt="Untitled"></p><blockquote><p>Call the <code>uvm_config_db::set</code> to pass down the <code>env_cfg</code> object</p><p>Instance name supports pattern matching glob-style or regex</p><p>In the example, all instance looking for the object with the field name <code>config</code> of type <code>env_config</code> will be able to do so</p></blockquote><p>⇒ <code>uvm_config_db</code> can affect the performance</p><p><img src="'+D+'" alt="Untitled"></p><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p><em>Use <code>uvm_object/component_utils</code> macro to register with factory</em></p><p><em>Always call <code>&lt;type&gt;::type_id::create()</code></em></p><p><em>Register tests with the factory</em></p><p><em>Call <code>run_test()</code> with null argument</em></p><ul><li>Specify which test via the command line</li></ul><p><em>Use config DB at build-time</em></p><ul><li>Components get their config before configuring children</li><li>Highest set wins</li></ul><p><em>Use config DB at run-time</em></p><ul><li>Last set wins</li><li>Up to the “getter” to decide when it’s legal</li></ul>',77)]))}const z=e(q,[["render",U]]);export{j as __pageData,z as default};
