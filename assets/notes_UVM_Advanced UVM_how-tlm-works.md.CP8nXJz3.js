import{_ as t,c as s,a2 as a,o as i}from"./chunks/framework.CbP2pKAi.js";const o="/assets/Untitled.uUBOgOc2.png",n="/assets/Untitled%201.DrAST_eD.png",l="/assets/Untitled%202.DO0ZjJ3m.png",r="/assets/Untitled%203.ub19X6jK.png",p="/assets/Untitled%204.D8CP9Z-G.png",c="/assets/Untitled%205.sDTFgg5W.png",d="/assets/Untitled%206.MuZcVSU7.png",h="/assets/Untitled%207.CihbsDP2.png",m="/assets/Untitled%208.xszJv8h3.png",u="/assets/Untitled%209.CsxOtios.png",k="/assets/Untitled%2010.hdQn6H_b.png",g="/assets/Untitled%2011.D-IbRrDp.png",b="/assets/Untitled%2012.Ds6NX49r.png",y="/assets/Untitled%2013.BOThWOTZ.png",_="/assets/Untitled%2014.BHntTLVn.png",w=JSON.parse('{"title":"How TLM Works","description":"","frontmatter":{"slug":"how-tlm-works"},"headers":[],"relativePath":"notes/UVM/Advanced UVM/how-tlm-works.md","filePath":"notes/UVM/Advanced UVM/how-tlm-works.md","lastUpdated":1727604100000}'),f={name:"notes/UVM/Advanced UVM/how-tlm-works.md"};function x(C,e,A,v,D,U){return i(),s("div",null,e[0]||(e[0]=[a('<h1 id="how-tlm-works" tabindex="-1">How TLM Works <a class="header-anchor" href="#how-tlm-works" aria-label="Permalink to &quot;How TLM Works&quot;">​</a></h1><blockquote><p>Contents are extracted from the Advanced UVM sessions by <a href="https://verificationacademy.com/" target="_blank" rel="noreferrer">Verification Academy</a>.</p></blockquote><h2 id="tlm" tabindex="-1">TLM <a class="header-anchor" href="#tlm" aria-label="Permalink to &quot;TLM&quot;">​</a></h2><p><em>TLM is all about communication through method calls</em></p><ul><li>A TLM port specifies the “API” to be used</li><li>A TLM export supplies the implementation of the methods</li></ul><p><em>Connections are between ports/exports, not components</em></p><p><em>Transaction are objects</em></p><p><em>Ports &amp; exports are parameterized with the type of the transaction being communicated</em></p><p><img src="'+o+'" alt="Untitled"></p><blockquote><p>Factory can be used to change the component’s type, as long as it is similar type and have the same set of interfaces</p></blockquote><h2 id="hierarchical-connections" tabindex="-1">Hierarchical connections <a class="header-anchor" href="#hierarchical-connections" aria-label="Permalink to &quot;Hierarchical connections&quot;">​</a></h2><h3 id="port-to-export" tabindex="-1">Port-to-Export <a class="header-anchor" href="#port-to-export" aria-label="Permalink to &quot;Port-to-Export&quot;">​</a></h3><div class="language-system-verilog vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">system-verilog</span><pre class="shiki shiki-themes vitesse-light vitesse-black vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">port</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">connect</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">export</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">);</span></span></code></pre></div><p><img src="'+n+'" alt="Untitled"></p><h3 id="port-to-port" tabindex="-1">Port-to-Port <a class="header-anchor" href="#port-to-port" aria-label="Permalink to &quot;Port-to-Port&quot;">​</a></h3><div class="language-system-verilog vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">system-verilog</span><pre class="shiki shiki-themes vitesse-light vitesse-black vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">child</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">port</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">connect</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">parent_port</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">);</span></span></code></pre></div><p><img src="'+l+'" alt="Untitled"></p><h3 id="export-to-export" tabindex="-1">Export-to-Export <a class="header-anchor" href="#export-to-export" aria-label="Permalink to &quot;Export-to-Export&quot;">​</a></h3><div class="language-system-verilog vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">system-verilog</span><pre class="shiki shiki-themes vitesse-light vitesse-black vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">parent_export</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">connect</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">child</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">export</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">);</span></span></code></pre></div><p><img src="'+r+'" alt="Untitled"></p><h3 id="last-export-is-actually-an-imp" tabindex="-1">Last export is actually an ‘imp’ <a class="header-anchor" href="#last-export-is-actually-an-imp" aria-label="Permalink to &quot;Last export is actually an ‘imp’&quot;">​</a></h3><blockquote><p>The source use the interface</p><p>The target supply the implementation of the interface</p><p>The implementation contains the transaction type and type of the component contains the implementation</p></blockquote><p><img src="'+p+'" alt="Untitled"></p><blockquote><p>The transaction flow from C1 → C2 and C2 will do something with it</p></blockquote><p>⇒ Factory override is also possible, C2X having different implementation on the <code>put</code> task</p><p><img src="'+c+'" alt="Untitled"></p><h2 id="analysis-communication" tabindex="-1">Analysis Communication <a class="header-anchor" href="#analysis-communication" aria-label="Permalink to &quot;Analysis Communication&quot;">​</a></h2><p><em>Analysis ports support 1:n connections</em></p><ul><li>All <code>write()</code> functions called in zero time</li></ul><p><em>Used by coverage collectors and scoreboards</em></p><ul><li><code>uvm_subscriber</code> has built-in <code>analysis_export</code></li></ul><p><img src="'+d+'" alt="Untitled"></p><blockquote><p>Every components connect to the <code>analysis_port</code> will have an implementation of the <code>write()</code> method</p><p>When one subscriber made one change on the transaction, all other subscribers will know the changes</p><p>Recommended to make a copy of the transaction handle when implementing the <code>write()</code> method</p></blockquote><h2 id="analysis-of-multiple-streams" tabindex="-1">Analysis of multiple streams <a class="header-anchor" href="#analysis-of-multiple-streams" aria-label="Permalink to &quot;Analysis of multiple streams&quot;">​</a></h2><blockquote><p>The <code>uvm_subscriber</code> only support single connection to <code>analysis_port</code></p></blockquote><p><em>Choice 1: Use imp suffixes defined via macro</em></p><ul><li>Declare macros outside of component</li><li>Instantiate suffixed imps</li><li>Implement <code>write_SUFFIX</code> methods</li></ul><p><em>Write methods are functions</em></p><ul><li>Can’t synchronize between streams</li></ul><p><img src="'+h+'" alt="Untitled"></p><p><em>Choice 2: Use embedded FIFOs (recommended)</em></p><ul><li>Declare analysis exports</li><li>Connect exports to FIFOs</li></ul><p><em><code>run_phase</code> can now actively pull from FIFOs</em></p><p><img src="'+m+'" alt="Untitled"></p><h2 id="tlm2-in-uvm" tabindex="-1">TLM2 in UVM <a class="header-anchor" href="#tlm2-in-uvm" aria-label="Permalink to &quot;TLM2 in UVM&quot;">​</a></h2><blockquote><p>TLM2: SystemC’s feature</p></blockquote><p><em>TLM2 based on a <code>generic_payload</code> transaction base class</em></p><ul><li>TLM2 uses <em>sockets,</em> which contain both a port and an export</li><li>Pass-by-reference (pass-by-value in TLM1)</li><li>The <em>generic payload</em> can be extended to model any kind of transaction</li></ul><p><em>Connections are between sockets, just like ports/exports</em></p><ul><li>Initiator socket connects to target socket</li></ul><p><img src="'+u+'" alt="Untitled"></p><h3 id="blocking-transport" tabindex="-1">Blocking transport <a class="header-anchor" href="#blocking-transport" aria-label="Permalink to &quot;Blocking transport&quot;">​</a></h3><p><em>Completes the entire transaction within a single method call</em></p><ul><li>Uses the <code>b_transport()</code> task</li></ul><p><img src="'+k+'" alt="Untitled"></p><h3 id="nonblocking-transport" tabindex="-1">Nonblocking transport <a class="header-anchor" href="#nonblocking-transport" aria-label="Permalink to &quot;Nonblocking transport&quot;">​</a></h3><p><em>Bidirectional communication</em></p><ul><li>Uses the <code>nb_transport_fw()</code> and <code>nb_transport_bw()</code> functions</li><li>Initiator implements the <code>nb_transport_bw()</code></li><li>Target implements the <code>nb_transport_fw()</code></li></ul><p><img src="'+g+'" alt="Untitled"></p><p><code>uvm_tlm_sync_e</code>: Indicates the status of the transaction</p><p><em>Pass through sockets</em></p><p><img src="'+b+'" alt="Untitled"></p><h3 id="generic-payload" tabindex="-1">Generic Payload <a class="header-anchor" href="#generic-payload" aria-label="Permalink to &quot;Generic Payload&quot;">​</a></h3><p><em>All elements are rand and protected</em></p><p><strong>Must use predefined virtual accessor methods</strong></p><p><strong>Defined to be either READ, WRITE or IGNORE command</strong></p><p><img src="'+y+'" alt="Untitled"></p><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p><em>Every port must eventually connect to an implementation (imp)</em></p><p><em>Mostly only use 2 port/export connections:</em></p><p><img src="'+_+'" alt="Untitled"></p><p><em>All TLM connections go from ‘origin’ to ‘destination’</em></p><ul><li><code>port.connect(export);</code></li><li><code>child_port.connect(parent_port);</code></li><li><code>parent_export.connect(child_export);</code></li></ul>',73)]))}const B=t(f,[["render",x]]);export{w as __pageData,B as default};
