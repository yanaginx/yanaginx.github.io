import{_ as t,c as a,a2 as i,o as n}from"./chunks/framework.CbP2pKAi.js";const s="/assets/Untitled.DfOxQ_me.png",o="/assets/Untitled%201.DMtO50rG.png",l="/assets/Untitled%202.BFRZb1VU.png",r="/assets/Untitled%203.BjJaonIm.png",c="/assets/Untitled%204.iFgw-r_Q.png",v=JSON.parse('{"title":"Architecting a UVM Testbench","description":"","frontmatter":{"slug":"architecting-a-uvm-testbench"},"headers":[],"relativePath":"notes/uvm/advanced-uvm/architecturing-a-uvm-testbench.md","filePath":"notes/uvm/advanced-uvm/architecturing-a-uvm-testbench.md","lastUpdated":1728207659000}'),h={name:"notes/uvm/advanced-uvm/architecturing-a-uvm-testbench.md"};function d(p,e,u,m,g,b){return n(),a("div",null,e[0]||(e[0]=[i('<h1 id="architecting-a-uvm-testbench" tabindex="-1">Architecting a UVM Testbench <a class="header-anchor" href="#architecting-a-uvm-testbench" aria-label="Permalink to &quot;Architecting a UVM Testbench&quot;">​</a></h1><blockquote><p>Contents are extracted from the Advanced UVM sessions by <a href="https://verificationacademy.com/" target="_blank" rel="noreferrer">Verification Academy</a>.</p></blockquote><h2 id="architectural-design" tabindex="-1">Architectural design <a class="header-anchor" href="#architectural-design" aria-label="Permalink to &quot;Architectural design&quot;">​</a></h2><h3 id="for-each-interface" tabindex="-1">For each interface <a class="header-anchor" href="#for-each-interface" aria-label="Permalink to &quot;For each interface&quot;">​</a></h3><ul><li>How does the interface work?</li><li>What information is transferred</li><li>Transaction variants?</li><li>Uni/bidirectional? Pipeline?</li></ul><h3 id="for-the-design" tabindex="-1">For the design: <a class="header-anchor" href="#for-the-design" aria-label="Permalink to &quot;For the design:&quot;">​</a></h3><ul><li>What does it do?</li><li>What are the use cases?</li><li>Which test cases are required?</li><li>What type of stimulus scenarios are required?</li><li>What represents correct behavior?</li><li>What kind of functional coverage needed?</li></ul><h2 id="building-blocks" tabindex="-1">Building blocks <a class="header-anchor" href="#building-blocks" aria-label="Permalink to &quot;Building blocks&quot;">​</a></h2><p><img src="'+s+'" alt="Untitled"></p><h2 id="block-level-env-test" tabindex="-1">Block-Level Env/Test <a class="header-anchor" href="#block-level-env-test" aria-label="Permalink to &quot;Block-Level Env/Test&quot;">​</a></h2><blockquote><p>It is not recommended to start the sequences on the environment if unsure</p></blockquote><blockquote><p>Test: Instantiate the environment and create environment configuration object, passing it to the environment</p></blockquote><p><img src="'+o+'" alt="Untitled"></p><p><img src="'+l+'" alt="Untitled"></p><blockquote><p>Environments can be instantiated inside another environment</p></blockquote><p><img src="'+r+'" alt="Untitled"></p><h2 id="phasing" tabindex="-1">Phasing <a class="header-anchor" href="#phasing" aria-label="Permalink to &quot;Phasing&quot;">​</a></h2><blockquote><p>UVM execution is controlled by phases</p></blockquote><div class="language-system-verilog vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">system-verilog</span><pre class="shiki shiki-themes vitesse-light vitesse-black vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;task/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">func</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> phasename_phase</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">uvm_phase</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> phase</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">)</span><span style="--shiki-light:#999999;--shiki-dark:#444444;">;</span></span></code></pre></div><p><strong>Build phase is called top-down</strong></p><ul><li>Facilitates hierarchical instantiation and configuration</li></ul><p><em>All others phases are called bottom-up</em></p><p><em><code>run_phase()</code> are the only task</em></p><ul><li>All <code>run_phase</code> methods execute in parallel</li></ul><p><em>Don’t use alternate run-time phases</em></p><p><img src="'+c+'" alt="Untitled"></p><blockquote><p>The virtual interface handle can be passed down the agent through the configuration object</p></blockquote><blockquote><p>Don’t call the <code>super.phasename_phase</code> on the component that directly inherit the <code>uvm_base</code> components (<code>uvm_test</code>, <code>uvm_env</code>, etc.)</p></blockquote><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p><em>Agents are protocol-specific</em></p><p><em>Environments define the testbench topology</em></p><ul><li>Which agents and how many</li><li>Other components</li></ul><p><strong>Base test instantiates env and handles default configuration</strong></p><p><em>Extend the base test to define additional test</em></p><ul><li>Tweak configuration and/or factory settings</li><li>Start (virtual) sequence(s)</li><li>Test handles phase objections</li></ul><p><em>Keep to basic phasing</em></p>',36)]))}const f=t(h,[["render",d]]);export{v as __pageData,f as default};
