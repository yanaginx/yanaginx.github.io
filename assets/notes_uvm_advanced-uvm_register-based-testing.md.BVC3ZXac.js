import{_ as i,c as s,a2 as a,o as t}from"./chunks/framework.CbP2pKAi.js";const r="/assets/Untitled.Bvc3KJTw.png",o="/assets/Untitled%201.Bm1SyIHi.png",l="/assets/Untitled%202.55ls9BxO.png",n="/assets/Untitled%203.BInFUwDL.png",d="/assets/Untitled%204.D7P0-53m.png",c="/assets/Untitled%205.DImgN9P0.png",p="/assets/Untitled%206.DQxOdEFw.png",m="/assets/Untitled%207.DrXSXrwp.png",h="/assets/Untitled%208.6YpFN5m4.png",g="/assets/Untitled%209.Cpt0jPPf.png",A=JSON.parse('{"title":"Register-Based Testing","description":"","frontmatter":{"slug":"registered-based-testing"},"headers":[],"relativePath":"notes/uvm/advanced-uvm/register-based-testing.md","filePath":"notes/uvm/advanced-uvm/register-based-testing.md","lastUpdated":1728207659000}'),u={name:"notes/uvm/advanced-uvm/register-based-testing.md"};function k(b,e,y,v,f,D){return t(),s("div",null,e[0]||(e[0]=[a('<h1 id="register-based-testing" tabindex="-1">Register-Based Testing <a class="header-anchor" href="#register-based-testing" aria-label="Permalink to &quot;Register-Based Testing&quot;">​</a></h1><blockquote><p>Contents are extracted from the Advanced UVM sessions by <a href="https://verificationacademy.com/" target="_blank" rel="noreferrer">Verification Academy</a>.</p></blockquote><h2 id="register-based-analysis-components" tabindex="-1">Register-based analysis components <a class="header-anchor" href="#register-based-analysis-components" aria-label="Permalink to &quot;Register-based analysis components&quot;">​</a></h2><p><em>The register model mirror value is used by analysis components</em></p><ul><li>Scoreboards to check current DUT configuration <ul><li>Where this may affect the checking algorithm</li></ul></li><li>Functional coverage monitors <ul><li>What is the configuration at a triggered sample?</li></ul></li></ul><p><em>Analysis components access physical registers passively (using the backdoor accesses):</em></p><ul><li>No ability to drive the bus</li><li>Backdoor <code>read()</code> or <code>peek()</code> accesses</li></ul><p><em>They look up the register model values directly</em></p><ul><li><code>spi_rm.ctrl.get_mirrored_value(data);</code></li><li><code>spi_rm.ctrl.value</code> or <code>spi_rm.ctrl.get(data);</code></li></ul><h2 id="register-scoreboard-guidelines" tabindex="-1">Register Scoreboard guidelines <a class="header-anchor" href="#register-scoreboard-guidelines" aria-label="Permalink to &quot;Register Scoreboard guidelines&quot;">​</a></h2><p><em>Scoreboard needs a handle to the register model</em></p><p><em>Scoreboard accesses register values from model</em></p><p><strong>Scoreboard checks DUT register contents</strong></p><ul><li>Compare observed data vs. register model contents</li><li>Compare DUT contents vs. expected <ul><li>via peek access to the DUT</li></ul></li></ul><p><img src="'+r+'" alt="Untitled"></p><h2 id="scoreboard-checking" tabindex="-1">Scoreboard checking <a class="header-anchor" href="#scoreboard-checking" aria-label="Permalink to &quot;Scoreboard checking&quot;">​</a></h2><p><img src="'+o+'" alt="Untitled"></p><h2 id="functional-coverage-monitors" tabindex="-1">Functional coverage monitors <a class="header-anchor" href="#functional-coverage-monitors" aria-label="Permalink to &quot;Functional coverage monitors&quot;">​</a></h2><p><em>The register model has built-in functional coverage</em></p><p><img src="'+l+'" alt="Untitled"></p><p><em>A custom functional coverage monitor can be defined to sample based on significant events</em></p><ul><li>Interrupts</li><li>Writes to certain trigger registers</li></ul><p><em>Register Assistant</em> generates ‘intelligent’ register access covergroup</p><ul><li>Included in the register package code</li></ul><h2 id="functional-coverage-monitor-example" tabindex="-1">Functional coverage monitor example <a class="header-anchor" href="#functional-coverage-monitor-example" aria-label="Permalink to &quot;Functional coverage monitor example&quot;">​</a></h2><p><img src="'+n+'" alt="Untitled"></p><p><img src="'+d+'" alt="Untitled"></p><h2 id="coding-guideline" tabindex="-1">Coding guideline <a class="header-anchor" href="#coding-guideline" aria-label="Permalink to &quot;Coding guideline&quot;">​</a></h2><aside><img src="https://www.notion.so/icons/info-alternate_green.svg" alt="https://www.notion.so/icons/info-alternate_green.svg" width="40px"> Always wrap a `covergroup` in a `uvm_object` wrapper </aside><blockquote><p>Allow the ability to override <code>covergroup</code> when necessary (<code>uvm_object</code> is overridden)</p></blockquote><p><img src="'+c+'" alt="Untitled"></p><h2 id="monitor-with-wrapped-covergroup" tabindex="-1">Monitor with Wrapped covergroup <a class="header-anchor" href="#monitor-with-wrapped-covergroup" aria-label="Permalink to &quot;Monitor with Wrapped covergroup&quot;">​</a></h2><p><img src="'+p+`" alt="Untitled"></p><h2 id="modeling-memory" tabindex="-1">Modeling memory <a class="header-anchor" href="#modeling-memory" aria-label="Permalink to &quot;Modeling memory&quot;">​</a></h2><p><em>The register model provides access to memory region</em></p><ul><li><p><code>mem.read()</code>/<code>mem.write()</code> to location x in memory y</p></li><li><p>The memory location address offset is calculated</p><div class="language-system-verilog vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">system-verilog</span><pre class="shiki shiki-themes vitesse-light vitesse-black vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">mem</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">read</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">status</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">offset_addr</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">, ...);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">mem</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">write</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">status</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">offset_addr</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">, </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CACC;">, ...);</span></span></code></pre></div></li></ul><p><em>The model does not shadow memory regions</em></p><ul><li>DUT memories are usually modelled separately</li><li>Maintaining a memory shadow is expensive</li><li>No <code>set()</code> / <code>get()</code> functions available</li></ul><p><em>Memory accesses can support bursts</em></p><ul><li><code>mem.burst_read()</code></li><li><code>mem.burst_write()</code></li></ul><h3 id="example-memory-based-sequence" tabindex="-1">Example memory based sequence <a class="header-anchor" href="#example-memory-based-sequence" aria-label="Permalink to &quot;Example memory based sequence&quot;">​</a></h3><p><img src="`+m+'" alt="Untitled"></p><p><img src="'+h+'" alt="Untitled"></p><h2 id="built-in-memory-sequences" tabindex="-1">Built-in Memory sequences <a class="header-anchor" href="#built-in-memory-sequences" aria-label="Permalink to &quot;Built-in Memory sequences&quot;">​</a></h2><p><img src="'+g+'" alt="Untitled"></p><h2 id="register-summary" tabindex="-1">Register Summary <a class="header-anchor" href="#register-summary" aria-label="Permalink to &quot;Register Summary&quot;">​</a></h2><p><em>Register block contains</em></p><ul><li>Register model <ul><li>Fields</li></ul></li><li>Address Map</li><li>Sub-blocks</li></ul><p><em>Register analysis components have register block pointer</em></p><ul><li>Access via <code>get()</code> or backdoor read/peek</li><li>Use <code>model.reg.value</code> directly</li></ul><p><em>Wrap covergroups to increase flexibility</em></p><p><em>Use built-in test sequences for sanity checking</em></p><ul><li>Registers and memories</li></ul>',53)]))}const B=i(u,[["render",k]]);export{A as __pageData,B as default};
