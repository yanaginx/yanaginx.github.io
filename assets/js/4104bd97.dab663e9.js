"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2501],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>_});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,_=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return t?i.createElement(_,r(r({ref:n},p),{},{components:t})):i.createElement(_,r({ref:n},p))}));function _(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:a,r[1]=l;for(var c=2;c<o;c++)r[c]=t[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9089:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=t(7462),a=(t(7294),t(3905));const o={slug:"uvm-module-access",title:"Accessing tops module from class-based component in UVM testbench",authors:"duongvc",tags:["SystemVerilog","UVM"]},r="For",l={permalink:"/blog/uvm-module-access",source:"@site/blog/2022-12-29-uvm-module-access/For accessing tops module from class-based compon f0f32d102515407f82fdf2c3ef9b8779.md",title:"Accessing tops module from class-based component in UVM testbench",description:"Overview",date:"2022-12-29T00:00:00.000Z",formattedDate:"December 29, 2022",tags:[{label:"SystemVerilog",permalink:"/blog/tags/system-verilog"},{label:"UVM",permalink:"/blog/tags/uvm"}],readingTime:4.71,hasTruncateMarker:!1,authors:[{name:"Duong Van",title:"Design Verification Engineer @ Marvell Vietnam LLC.",url:"https://github.com/yanaginx",imageURL:"https://github.com/yanaginx.png",key:"duongvc"}],frontMatter:{slug:"uvm-module-access",title:"Accessing tops module from class-based component in UVM testbench",authors:"duongvc",tags:["SystemVerilog","UVM"]},nextItem:{title:"Welcome",permalink:"/blog/welcome"}},s={authorsImageUrls:[void 0]},c=[{value:"Overview",id:"overview",level:2},{value:"The workaround",id:"the-workaround",level:2},{value:"Overview of the testbench",id:"overview-of-the-testbench",level:3},{value:"Implementation",id:"implementation",level:3},{value:"Summary",id:"summary",level:2}],p={toc:c};function d(e){let{components:n,...o}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"The case for the need of this access is inside a UVM Testbench, where the test would generate some randomization on the data and need to access the instantiated module (let say ",(0,a.kt)("inlineCode",{parentName:"p"},"model")," in this case) in the ",(0,a.kt)("inlineCode",{parentName:"p"},"top"),". "),(0,a.kt)("h2",{id:"the-workaround"},"The workaround"),(0,a.kt)("p",null,"For the workaround demonstration, a simple UVM testbench generated with ",(0,a.kt)("a",{parentName:"p",href:"https://www.doulos.com/knowhow/systemverilog/uvm/easier-uvm"},"EasierUVM")," will be used."),(0,a.kt)("h3",{id:"overview-of-the-testbench"},"Overview of the testbench"),(0,a.kt)("p",null,"// Update the graph later with the model\u2019s module"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Untitled",src:t(737).Z,width:"468",height:"439"})),(0,a.kt)("h3",{id:"implementation"},"Implementation"),(0,a.kt)("p",null,"The DUT in this case is a simple ALU\u2019s adder"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-verilog"},"module adder (\n    input  logic [7:0] A,\n    input  logic [7:0] B,\n    output logic [8:0] F\n        );\n    always_comb\n        F <= A+B;\nendmodule\n")),(0,a.kt)("p",null,"The module wanted to be accessed from the test is the input generator (this is for demonstration purpose only, for normal UVM testbench this should be implemented as UVM driver-driver BFM pair)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-verilog"},'module input_model (\n    input  logic clk,\n    output logic [7:0] A,\n    output logic [7:0] B\n);\n\n  logic [7:0] input_pool[*];\n  int current_index = 0;\n  int rand_index = 0;\n  reg [7:0] reg_A;\n  reg [7:0] reg_B;\n\n  // Function to be called for adding randomized input\n  function void insert_input(logic[7:0] value);\n    input_pool[current_index++] = value;\n    $display("INPUT MODEL: Currently inserting: 0x%8x at index %d", value, current_index-1);\n  endfunction : insert_input\n\n  always @(posedge clk) begin\n    assert ( randomize(rand_index) with { rand_index inside {[0:current_index-1]}; }) else \n    begin\n      $display("why the fuck can it not randomize properly?");\n    end\n    $display("Current rand_index: %d", rand_index);\n    $display("Current current_index: %d", current_index);\n    reg_A <= input_pool[rand_index];\n    reg_B <= input_pool[rand_index];\n  end\n\n  assign A = reg_A;\n  assign B = reg_B;\n\nendmodule : input_model\n')),(0,a.kt)("p",null,"The package containing the virtual class extending ",(0,a.kt)("inlineCode",{parentName:"p"},"uvm_object")," \u2192 This will be used in other testbench\u2019s class components"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-verilog"},'package backdoor_access_pkg;\n  import uvm_pkg::*;\n\n  virtual class input_model_backdoor extends uvm_pkg::uvm_object;\n    function new(string name="input_model_backdoor");\n      super.new(name);\n    endfunction\n\n    pure virtual function void insert_input(logic [7:0] value);\n\n  endclass : input_model_backdoor\n\nendpackage : backdoor_access_pkg\n')),(0,a.kt)("p",null,"The wrapper class for the module that extends and implement all the virtual methods of the created virtual class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-verilog"},'`include "uvm_macros.svh"\nimport uvm_pkg::*;\nimport backdoor_access_pkg::*;\n\nclass backdoor_im extends input_model_backdoor;\n  \n  function new(string name="backdoor_im");\n    super.new(name);\n  endfunction : new \n\n  function void insert(logic[7:0] value);\n    **top_tb.th.model.insert_input(value);**\n  endfunction : insert\n            \nendclass : backdoor_im\n\ninitial begin\n  backdoor_im backdoor_im_i;\n  backdoor_im_i = new();\n  uvm_config_db #(uvm_object)::set(uvm_root::get(), "*", "IM_BACKDOOR_ACCESS", backdoor_im_i);  \nend\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Adding the handle to the ",(0,a.kt)("inlineCode",{parentName:"li"},"uvm_config_db")," under ",(0,a.kt)("inlineCode",{parentName:"li"},"uvm_root::get()")," as the parent, ",(0,a.kt)("inlineCode",{parentName:"li"},"*")," as the scope, key string and the handle itself:"),(0,a.kt)("li",{parentName:"ul"},"Instantiating it in the ",(0,a.kt)("inlineCode",{parentName:"li"},"top.sv")," , (",(0,a.kt)("inlineCode",{parentName:"li"},"top_tb.sv")," in this example)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-verilog"},'module top_tb;\n\n  timeunit      1ns;\n  timeprecision 1ps;\n\n  `include "uvm_macros.svh"\n\n  import uvm_pkg::*;\n\n  import top_test_pkg::*;\n  import top_pkg::top_config;\n\n  // Configuration object for top-level environment\n  top_config top_env_config;\n\n  // Test harness\n  top_th th();\n\n  **`include "backdoor_input_model.sv"**\n\n  initial\n  begin\n    // Create and populate top-level configuration object\n    top_env_config = new("top_env_config");\n    if ( !top_env_config.randomize() )\n      `uvm_error("top_tb", "Failed to randomize top-level configuration object" )\n\n    top_env_config.arith_vif             = th.arith_if_0;\n    top_env_config.is_active_arith       = UVM_ACTIVE;   \n    top_env_config.checks_enable_arith   = 1;            \n    top_env_config.coverage_enable_arith = 1;            \n\n    uvm_config_db #(top_config)::set(null, "uvm_test_top", "config", top_env_config);\n    uvm_config_db #(top_config)::set(null, "uvm_test_top.m_env", "config", top_env_config);\n\n    run_test();\n  end\n\nendmodule\n')),(0,a.kt)("p",null,"Including the packages in the environment (in this case in the agent\u2019s package)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-verilog"},'package arith_pkg;\n\n  `include "uvm_macros.svh"\n\n  import uvm_pkg::*;\n    import backdoor_access_pkg::*;\n\n  `include "arith_trans.sv"\n  `include "arith_config.sv"\n  `include "arith_driver.sv"\n  `include "arith_monitor.sv"\n  `include "arith_sequencer.sv"\n  `include "arith_coverage.sv"\n  `include "arith_agent.sv"\n  `include "arith_seq_lib.sv"\n\nendpackage : arith_pkg\n')),(0,a.kt)("p",null,"And the remaining is to access the module from the test using the virtual class, by fetching the handle from the ",(0,a.kt)("inlineCode",{parentName:"p"},"uvm_config_db")," as an ",(0,a.kt)("inlineCode",{parentName:"p"},"uvm_object")," and cast it to the correct type of the virtual class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-verilog"},'`ifndef TOP_TEST_SV\n`define TOP_TEST_SV\n\n// You can insert code here by setting test_inc_before_class in file common.tpl\n\nclass top_test extends uvm_test;\n\n  `uvm_component_utils(top_test)\n\n  // Change made here\n  top_env m_env;\n  logic [7:0] rand_input = 0;\n  // end : Change made here\n\n  backdoor_access_pkg::input_model_backdoor backdoor_im_i;\n  uvm_object backdoor_object_i;\n\n  extern function new(string name, uvm_component parent);\n\n  extern function void build_phase(uvm_phase phase);\n\n  extern task run_phase(uvm_phase phase);\n\nendclass : top_test\n\nfunction top_test::new(string name, uvm_component parent);\n  super.new(name, parent);\nendfunction : new\n\nfunction void top_test::build_phase(uvm_phase phase);\n\n  m_env = top_env::type_id::create("m_env", this);\n\n  // Fetching the handle from the uvm_config_db and cast it to the correct type\n  **if(!uvm_config_db#(uvm_object)::get(uvm_root::get(), "", "IM_BACKDOOR_ACCESS", backdoor_object_i))   \n  begin\n    `uvm_fatal("TEST","Failed to get input model backdoor access object")\n  end\n  assert($cast(backdoor_im_i, backdoor_object_i)) else begin\n    `uvm_fatal("ASSERT", "Dynamic casting backdoor_im_instance failed!")\n  end**\n\nendfunction : build_phase\n\ntask top_test::run_phase(uvm_phase phase);\n  $display("Went in the run_phase of the test!");\n  #10;\n  for (int i = 0; i < 256; ++i) begin\n    assert (randomize(rand_input));\n    backdoor_im_i.insert(rand_input);\n  end\n  #1000;\nendtask\n\n`endif // TOP_TEST_SV\n')),(0,a.kt)("p",null,"Also remember to compile the ",(0,a.kt)("inlineCode",{parentName:"p"},".sv")," file and packages properly. The compiling sequence should be included in the ",(0,a.kt)("inlineCode",{parentName:"p"},"compile_questa.do")," script."),(0,a.kt)("p",null,"The result when running the simulation"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Untitled",src:t(2726).Z,width:"1160",height:"1028"})),(0,a.kt)("p",null,"The result when dumping signals, by adding some signals on ",(0,a.kt)("inlineCode",{parentName:"p"},"top_th.sv")," and a little addition on ",(0,a.kt)("inlineCode",{parentName:"p"},"top_tb.sv")," file"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Untitled",src:t(9614).Z,width:"935",height:"673"})),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Untitled",src:t(4190).Z,width:"845",height:"507"})),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Untitled",src:t(2235).Z,width:"2545",height:"507"})),(0,a.kt)("p",null,"This result concludes the ability to manipulate the module that is instantiated on the ",(0,a.kt)("inlineCode",{parentName:"p"},"top")," from a test component in UVM testbench"),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create a virtual class extending ",(0,a.kt)("inlineCode",{parentName:"li"},"uvm_object")," (for example ",(0,a.kt)("inlineCode",{parentName:"li"},"VC"),")"),(0,a.kt)("li",{parentName:"ul"},"Create a wrapper ",(0,a.kt)("em",{parentName:"li"},"class")," for the module that extends and implement all the virtual methods of the created virtual class",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Instantiating it in the ",(0,a.kt)("inlineCode",{parentName:"p"},"top.sv"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Adding the handle to the ",(0,a.kt)("inlineCode",{parentName:"p"},"uvm_config_db")," under ",(0,a.kt)("inlineCode",{parentName:"p"},"uvm_root::get()")," as the parent, ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," as the scope, key string and the handle itself:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},'uvm_config_db #(uvm_object)::set(uvm_root::get(), "*", "<KEY>", <wrapper_handle>);\n')),(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"This will ensure the scope of the statement used to call the ",(0,a.kt)("inlineCode",{parentName:"p"},"top"),"'s instantiated module."),(0,a.kt)("p",{parentName:"blockquote"},"Meaning the statement ",(0,a.kt)("inlineCode",{parentName:"p"},"top.<module_name>.<method_name>()")," should be valid."))))),(0,a.kt)("li",{parentName:"ul"},"The virtual class ",(0,a.kt)("inlineCode",{parentName:"li"},"VC")," mentioned above will be used for the lower level component in the environment hierarchy for accessing the top instantiated module\u2019s methods.")))}d.isMDXComponent=!0},2726:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/Untitled 1-e9d1e3a70f60f4580f83e2fe4c1c5efe.png"},9614:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/Untitled 2-c186e14afe6b806756d37f30f5528e79.png"},4190:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/Untitled 3-527c54b32a73755cbbe1224383bee7fb.png"},2235:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/Untitled 4-aec093b56fe0ba1448cdb7ef0441e3d6.png"},737:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/Untitled-26f77d47ef9f29026e0cec6644debb30.png"}}]);