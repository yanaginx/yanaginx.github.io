import{_ as t,c as a,a2 as s,o}from"./chunks/framework.CbP2pKAi.js";const i="/assets/Untitled.cL_ep135.png",l="/assets/Untitled%201.CZxKteLo.png",r="/assets/Untitled%202.CRUunHDx.png",n="/assets/Untitled%203.C-eR_Wnb.png",c="/assets/Untitled%204.CrrQtw0U.png",d="/assets/Untitled%205.BR0b8QXC.png",p="/assets/Untitled%206.CdESLhos.png",h="/assets/Untitled%207.DKGarSz6.png",m="/assets/Untitled%208.C-sk2hbd.png",u="/assets/Untitled%209.B8M4fQZL.png",b="/assets/Untitled%2010.D5mYuaVc.png",g="/assets/Untitled%2011.Bj99ghtf.png",y="/assets/Untitled%2012.QGUYP20B.png",f="/assets/Untitled%2013.C3MLQWcp.png",q="/assets/Untitled%2014.CzvH3qBI.png",v="/assets/Untitled%2015.B87teXwr.png",k="/assets/Untitled%2016.Br34sxbN.png",x="/assets/Untitled%2017.BMx3MXx5.png",_="/assets/Untitled%2018.D4orUUBz.png",U="/assets/Untitled%2019.BHF3yNhz.png",P="/assets/Untitled%2020.CRkTmvYH.png",w="/assets/Untitled%2021.CqZfOQZL.png",C="/assets/Untitled%2022.TXuIZohj.png",j="/assets/Untitled%2023.CsYevEEk.png",O="/assets/Untitled%2024.RtSlTy6q.png",S="/assets/Untitled%2025.DtYMig3Y.png",A="/assets/Untitled%2026.CArvs4g4.png",z="/assets/Untitled%2027.BLX-Swn-.png",V="/assets/Untitled%2028.RusLdyPV.png",D="/assets/Untitled%2029.C5XIuweS.png",T=JSON.parse('{"title":"SystemVerilog OOP for UVM","description":"","frontmatter":{"slug":"systemverilog-oop-for-uvm"},"headers":[],"relativePath":"notes/SystemVerilog/systemverilog-oop-for-uvm.md","filePath":"notes/SystemVerilog/systemverilog-oop-for-uvm.md","lastUpdated":1727526443000}'),B={name:"notes/SystemVerilog/systemverilog-oop-for-uvm.md"};function E(I,e,M,F,G,L){return o(),a("div",null,e[0]||(e[0]=[s('<h1 id="systemverilog-oop-for-uvm" tabindex="-1">SystemVerilog OOP for UVM <a class="header-anchor" href="#systemverilog-oop-for-uvm" aria-label="Permalink to &quot;SystemVerilog OOP for UVM&quot;">​</a></h1><p>Note taken from the course SystemVerilog OOP for UVM on Verification Academy</p><h2 id="good-reads" tabindex="-1">Good reads <a class="header-anchor" href="#good-reads" aria-label="Permalink to &quot;Good reads&quot;">​</a></h2><p><a href="./systemverilog-oop-for-uvm.html#object-handles">Object handles</a></p><p><a href="./systemverilog-oop-for-uvm.html#copying-handles-vs-copying-objects">Copying handles vs copying objects</a></p><p><a href="./systemverilog-oop-for-uvm.html#inheritance-and-polymorphism">Inheritance and Polymorphism</a></p><p><a href="./systemverilog-oop-for-uvm.html#parameterized-classes">Parameterized classes</a></p><p><a href="./systemverilog-oop-for-uvm.html#singleton-with-local-qualifiers">Singleton with local qualifiers</a></p><p><a href="./systemverilog-oop-for-uvm.html#factory-pattern">Factory pattern</a></p><p><a href="./systemverilog-oop-for-uvm.html#factory-registration">Factory registration</a></p><h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><h3 id="sv-oop" tabindex="-1">SV &amp; OOP <a class="header-anchor" href="#sv-oop" aria-label="Permalink to &quot;SV &amp; OOP&quot;">​</a></h3><p>OOP enabling these concepts:</p><ul><li>Encapsulation</li><li>Inheritance</li><li>Data hiding</li><li>Generic programming (template/parameterization)</li><li>Polymorphism</li></ul><p>Classes can be used to model</p><ul><li>Reusable verification environments</li><li>Abstract data &amp; methods that operate on them</li></ul><h3 id="systemverilog-class-terminology" tabindex="-1">SystemVerilog Class Terminology <a class="header-anchor" href="#systemverilog-class-terminology" aria-label="Permalink to &quot;SystemVerilog Class Terminology&quot;">​</a></h3><blockquote><p>Class objects are accessed through <em>Class handles</em> (not pointer, since handle are safer and such → handle are safe pointers)</p></blockquote><h3 id="class-basics" tabindex="-1">Class basics <a class="header-anchor" href="#class-basics" aria-label="Permalink to &quot;Class basics&quot;">​</a></h3><blockquote><p>Class declaration does not allocate any storage, it only creates a new type</p><p>Don’t confuse SVA’s <code>property</code> with <em>class properties</em></p><p>Both methods and properties are members of the class</p></blockquote><p>Classes are dynamically created <strong>objects</strong> (class instance)</p><p>Calling <code>new()</code> creates an instance and allocate memory</p><h3 id="object-handles" tabindex="-1">Object handles <a class="header-anchor" href="#object-handles" aria-label="Permalink to &quot;Object handles&quot;">​</a></h3><p>A class variable only refer to a valid object → holding a <em>handle</em> referencing an <em>object</em></p><p><img src="'+i+'" alt="Untitled"></p><p>Uninitialized variables have a special value <code>null</code></p><p><img src="'+l+'" alt="Untitled"></p><p>Object destruction/de-allocation done automatically after an object has no references</p><h3 id="automatic-memory-management" tabindex="-1">Automatic memory management <a class="header-anchor" href="#automatic-memory-management" aria-label="Permalink to &quot;Automatic memory management&quot;">​</a></h3><p><img src="'+r+'" alt="Untitled"></p><h3 id="class-methods" tabindex="-1">Class methods <a class="header-anchor" href="#class-methods" aria-label="Permalink to &quot;Class methods&quot;">​</a></h3><p>As with Verilog:</p><ul><li>Tasks can block and consume time</li><li>Functions must be non-blocking and can return values</li></ul><h3 id="this" tabindex="-1"><code>this</code> <a class="header-anchor" href="#this" aria-label="Permalink to &quot;`this`&quot;">​</a></h3><p>An implicit argument to a method that refers to the current object</p><p><img src="'+n+'" alt="Untitled"></p><h3 id="copying-handles-vs-copying-objects" tabindex="-1">Copying handles vs copying objects <a class="header-anchor" href="#copying-handles-vs-copying-objects" aria-label="Permalink to &quot;Copying handles vs copying objects&quot;">​</a></h3><p><img src="'+c+'" alt="Untitled"></p><blockquote><p>After the shallow copies object, the <code>Pkt2_h</code> and <code>Pkt1_h</code> handles are pointing to distinct object, meaning <code>Pkt1_h.status</code> remains 5 after the <code>Pkt2_h.status = 10</code> statement</p></blockquote><h3 id="shallow-copy-example" tabindex="-1">Shallow copy example <a class="header-anchor" href="#shallow-copy-example" aria-label="Permalink to &quot;Shallow copy example&quot;">​</a></h3><p><img src="'+d+'" alt="Untitled"></p><h3 id="deep-copy-example" tabindex="-1">Deep copy example <a class="header-anchor" href="#deep-copy-example" aria-label="Permalink to &quot;Deep copy example&quot;">​</a></h3><p>To do a “deep” copy, a custom <code>copy</code> method must be created</p><p><img src="'+p+'" alt="Untitled"></p><h3 id="static-properties" tabindex="-1">Static properties <a class="header-anchor" href="#static-properties" aria-label="Permalink to &quot;Static properties&quot;">​</a></h3><p>Get created as soon as we declared the type</p><p>Available throughout the simulation</p><p>Access the static properties through <code>&lt;Class_name&gt;::&lt;Properties_name&gt;</code></p><p><img src="'+h+'" alt="Untitled"></p><h3 id="static-methods" tabindex="-1">Static methods <a class="header-anchor" href="#static-methods" aria-label="Permalink to &quot;Static methods&quot;">​</a></h3><p>Can be called without a specific object</p><p>Cannot access non-static members (no <code>this</code> object)</p><p><img src="'+m+'" alt="Untitled"></p><h2 id="inheritance-and-polymorphism" tabindex="-1">Inheritance and Polymorphism <a class="header-anchor" href="#inheritance-and-polymorphism" aria-label="Permalink to &quot;Inheritance and Polymorphism&quot;">​</a></h2><h3 id="inheritance" tabindex="-1">Inheritance <a class="header-anchor" href="#inheritance" aria-label="Permalink to &quot;Inheritance&quot;">​</a></h3><ul><li>Creates new class type based on an existing class type</li></ul><p><img src="'+u+'" alt="Untitled"></p><ul><li>Add new methods or add new behaviors to an existing method</li></ul><p><img src="'+b+'" alt="Untitled"></p><blockquote><p>Overriding the method caused the overrided method be hidden from the extended class</p><p>Can use the <code>super.</code> to look back from the base class and access base class’s methods</p></blockquote><h3 id="constructing-extended-classes" tabindex="-1">Constructing Extended classes <a class="header-anchor" href="#constructing-extended-classes" aria-label="Permalink to &quot;Constructing Extended classes&quot;">​</a></h3><p><img src="'+g+'" alt="Untitled"></p><h3 id="class-variables-with-inheritance" tabindex="-1">Class variables with inheritance <a class="header-anchor" href="#class-variables-with-inheritance" aria-label="Permalink to &quot;Class variables with inheritance&quot;">​</a></h3><ul><li>Base class variable can hold handles to extended objects, but not the reverse</li></ul><p><img src="'+y+'" alt="Untitled"></p><h3 id="dynamic-casting-of-class-handles" tabindex="-1">Dynamic casting of class handles <a class="header-anchor" href="#dynamic-casting-of-class-handles" aria-label="Permalink to &quot;Dynamic casting of class handles&quot;">​</a></h3><p><img src="'+f+'" alt="Untitled"></p><p><img src="'+q+'" alt="Untitled"></p><h3 id="polymorphism" tabindex="-1">Polymorphism <a class="header-anchor" href="#polymorphism" aria-label="Permalink to &quot;Polymorphism&quot;">​</a></h3><ul><li>Ability to have the same code act differently on different type</li><li>A key requirement for any OOP languages</li><li>Statically at compile time using parameterized type</li><li>Dynamically during run-time using virtual class methods</li></ul><h3 id="virtual-class-methods" tabindex="-1">Virtual class methods <a class="header-anchor" href="#virtual-class-methods" aria-label="Permalink to &quot;Virtual class methods&quot;">​</a></h3><ul><li>Chose the method by object type, not class variable</li></ul><p><img src="'+v+'" alt="Untitled"></p><ul><li><p>Override must have the same prototype</p><blockquote><p>Once <code>virtual</code> → Always <code>virtual</code></p></blockquote></li></ul><p>In the <code>run</code> task, the <code>$display(p_h.status)</code> will be either 5 or 6 since the method will check whether the object calling it is of type <code>ErrorPkt</code> or of type <code>Packet</code>, not requiring for the object in the argument <code>run</code> task to be explicitly of type <code>ErrorPkt</code> or <code>Packet</code></p><blockquote><p><code>virtual</code> methods behave without knowing if it’s dealing with base class object or the base class’s derivatives</p></blockquote><h3 id="mixing-virtual-and-non-virtual-methods" tabindex="-1">Mixing virtual and non-virtual methods <a class="header-anchor" href="#mixing-virtual-and-non-virtual-methods" aria-label="Permalink to &quot;Mixing virtual and non-virtual methods&quot;">​</a></h3><ul><li>Clone is a construction with copy</li></ul><p><img src="'+k+'" alt="Untitled"></p><blockquote><p><code>copy</code> is non-virtual here since we want to call the correct <code>copy</code> methods according to each type</p><p>And the <code>copy</code>&#39;s argument should be local class type, which allow direct access to local properties without casting</p></blockquote><h3 id="accessibility-and-abstract-classes" tabindex="-1">Accessibility and Abstract classes <a class="header-anchor" href="#accessibility-and-abstract-classes" aria-label="Permalink to &quot;Accessibility and Abstract classes&quot;">​</a></h3><p>By default, all class members are public</p><ul><li><code>local</code> quailifer restricts access to only within the declared class</li><li><code>protected</code> qualifier restricts access to only within the declared class and an extension of that class</li></ul><p><em>Abstract class</em></p><ul><li>Can never be constructed directly</li><li>Can only construct class extended from base class</li><li>Provide common API for class methodology</li><li>Can declare virtual method prototypes that must be overriden in extended class</li></ul><h3 id="abstract-class-example" tabindex="-1">Abstract class example <a class="header-anchor" href="#abstract-class-example" aria-label="Permalink to &quot;Abstract class example&quot;">​</a></h3><blockquote><p><code>pure virtual</code> tells the extended class must provide the implementation of the method</p></blockquote><p><img src="'+x+'" alt="Untitled"></p><h3 id="extending-abstract-class-into-concrete" tabindex="-1">Extending Abstract class into Concrete <a class="header-anchor" href="#extending-abstract-class-into-concrete" aria-label="Permalink to &quot;Extending Abstract class into Concrete&quot;">​</a></h3><p><img src="'+_+'" alt="Untitled"></p><h2 id="oop-design-pattern-examples" tabindex="-1">OOP Design pattern examples <a class="header-anchor" href="#oop-design-pattern-examples" aria-label="Permalink to &quot;OOP Design pattern examples&quot;">​</a></h2><h3 id="parameterized-classes" tabindex="-1">Parameterized classes <a class="header-anchor" href="#parameterized-classes" aria-label="Permalink to &quot;Parameterized classes&quot;">​</a></h3><ul><li><p>Generic class to be instantiated as objects of different types or sizes</p><ul><li><p>Uses module-like parameter passing</p><p><img src="'+U+'" alt="Untitled"></p></li></ul></li><li><p>A generic class &amp; actual parameter values is called a s<em>pecialization</em></p></li></ul><p><img src="'+P+'" alt="Untitled"></p><h3 id="parameterized-classes-with-static-properties" tabindex="-1">Parameterized classes with static properties <a class="header-anchor" href="#parameterized-classes-with-static-properties" aria-label="Permalink to &quot;Parameterized classes with static properties&quot;">​</a></h3><ul><li>Static properties do not get allocated until specialized</li><li>Each specialization has unique set of static properties</li></ul><p><img src="'+w+'" alt="Untitled"></p><blockquote><p>SV create static properties of generic class as soon as there is any reference to a specialization of that class</p><p>No need construction of that class</p></blockquote><h3 id="class-scope-operator" tabindex="-1">Class scope operator <a class="header-anchor" href="#class-scope-operator" aria-label="Permalink to &quot;Class scope operator&quot;">​</a></h3><ul><li>Access static member properties and methods without instance</li><li><code>className#(parameter overrides)::memberName</code></li></ul><p><img src="'+C+'" alt="Untitled"></p><blockquote><p>The creations of specialization are handled at compile time</p></blockquote><h3 id="singleton-with-local-qualifiers" tabindex="-1">Singleton with local qualifiers <a class="header-anchor" href="#singleton-with-local-qualifiers" aria-label="Permalink to &quot;Singleton with local qualifiers&quot;">​</a></h3><ul><li>Guarantees only one instance of a class</li></ul><p><img src="'+j+'" alt="Untitled"></p><ul><li><p>Construct on first use</p><p><img src="'+O+'" alt="Untitled"></p></li><li><p>Avoid static variable initialization ordering</p><ul><li><code>my_root</code></li><li><code>me</code></li></ul></li></ul><h3 id="factory-pattern" tabindex="-1">Factory pattern <a class="header-anchor" href="#factory-pattern" aria-label="Permalink to &quot;Factory pattern&quot;">​</a></h3><p><img src="'+S+'" alt="Untitled"></p><ul><li>Polymorphic construction <ul><li>Delegate construction to another object that can decide what kind of object to create</li><li>Decouples instantiating class type from the actual type being constructed</li></ul></li></ul><p><strong>Proxy class</strong></p><ul><li>Stand-in for the full object it represents</li><li>Defers creating the actual object until it is requested</li></ul><p><img src="'+A+'" alt="Untitled"></p><p><em>Proxy class example</em></p><p><img src="'+z+'" alt="Untitled"></p><blockquote><p>Using <code>$cast</code> here since the <code>factory[&quot;C&quot;].createObj()</code> return a <code>Object</code> class’s instance, need to downcast it</p></blockquote><h3 id="factory-registration" tabindex="-1">Factory registration <a class="header-anchor" href="#factory-registration" aria-label="Permalink to &quot;Factory registration&quot;">​</a></h3><ul><li>Use static variable initialization to register proxies</li></ul><p><img src="'+V+'" alt="Untitled"></p><p><em>Example</em></p><p><img src="'+D+'" alt="Untitled"></p><blockquote><p>Overrides here would replace the D object with C object upon requesting the factory</p></blockquote>',121)]))}const R=t(B,[["render",E]]);export{T as __pageData,R as default};
